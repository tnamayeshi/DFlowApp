<?xml version="1.0" encoding="UTF-8"?>
<Caren2Project id="0" ApplicationVersion="687" ConsoleWidth="602" ConsoleShowDeviceConnections="false" ProjectFolder="" version="3.34.3">
  <Documentation id="0" Description="" Instructions="" Changes="" Authors="" Organization="" UUID="" Date="20220411"/>
  <FrameControl id="0" ViewerMax="60" IGMax="60" DFlowMin="30" DFlowMax="300" UseViewerMax="true" UseIGMax="false" UseDFlowMin="false" UseDFlowMax="true"/>
  <SystemState id="0" HighPerformanceMode="false"/>
  <InputOutput>
    <Tab id="0" name="Treadmill Perturbation" color="140"/>
    <Parameter param_type="2" tab="0" id="0" name="TreadmillPerturbEnable" came="Enable Treadmill Perturbation" width="3" value="true" default="true"/>
    <Parameter param_type="4" tab="0" id="0" name="Separator5" came="Setup" width="3"/>
    <Parameter param_type="1" tab="0" id="0" name="TreadmillPerturbLeg" came="Leg" width="3" value="2" default="2">
      <item_names>
        <StringArray>
          <String value="Left"/>
          <String value="Right"/>
          <String value="Both"/>
        </StringArray>
      </item_names>
      <item_values>
        <RealArray>
          <Real value="1"/>
          <Real value="2"/>
          <Real value="3"/>
        </RealArray>
      </item_values>
    </Parameter>
    <Parameter param_type="1" tab="0" id="0" name="TreadmillPerturbType" came="Type" width="3" value="2" default="2">
      <item_names>
        <StringArray>
          <String value="Acceleration"/>
          <String value="Deceleration"/>
          <String value="Both"/>
        </StringArray>
      </item_names>
      <item_values>
        <RealArray>
          <Real value="1"/>
          <Real value="2"/>
          <Real value="3"/>
        </RealArray>
      </item_values>
    </Parameter>
    <Parameter param_type="1" tab="0" id="0" name="TreadmillPerturbOnset" came="Onset" width="3" value="2" default="2">
      <item_names>
        <StringArray>
          <String value="Hill Strike"/>
          <String value="Toe Off"/>
          <String value="Both"/>
        </StringArray>
      </item_names>
      <item_values>
        <RealArray>
          <Real value="1"/>
          <Real value="2"/>
          <Real value="3"/>
        </RealArray>
      </item_values>
    </Parameter>
    <Parameter param_type="2" tab="0" id="0" name="TreadmillPerturbRandom" came="Randomize Permutation" width="3" value="true" default="true"/>
    <Parameter param_type="0" tab="0" id="0" name="TreadmillSpeed" came="Speed" width="3" value="1.25" min="0.1" max="7" step="0.1" default="1.25"/>
    <Parameter param_type="4" tab="0" id="0" name="Separator6" came="Perturbation Interval" width="3"/>
    <Parameter param_type="2" tab="0" id="0" name="TreadmillPerturbRandomInterval" came="Random Intervals [Seconds] (if unchecked, would set to min value)" width="3" value="true" default="true"/>
    <Parameter param_type="0" tab="0" id="0" name="TreadmillPerturbIntervalMin" came="Minimum" width="1" value="10" min="10" max="300" step="0.1" default="10"/>
    <Parameter param_type="0" tab="0" id="0" name="TreadmillPerturbIntervalMax" came="Maximum" width="1" value="12" min="5" max="300" step="0.01" default="12"/>
    <Parameter param_type="4" tab="0" id="0" name="Separator7" came="Perturbation Intensity" width="3"/>
    <Parameter param_type="0" tab="0" id="0" name="TreadmillPerturbAccMag" came="Acceleration" width="1" value="1.5" min="0.05" max="15" step="0.05" default="1.5"/>
    <Parameter param_type="0" tab="0" id="0" name="TreadmillPerturbRiseTime" came="Rise Time" width="1" value="0.6" min="0.1" max="5" step="0.05" default="0.6"/>
    <Parameter param_type="0" tab="0" id="0" name="TreadmillPerturbSettleTime" came="Settle Time" width="1" value="0" min="0" max="5" step="0.01" default="0"/>
    <Parameter param_type="0" tab="0" id="0" name="TreadmillPerturbFallTime" came="Fall Time" width="1" value="0.1" min="0.1" max="5" step="0.01" default="0.1"/>
    <EnableSubjectTab enable="1"/>
    <EnableMessages enable="0"/>
    <EnableAction enable="1"/>
    <EnableResetParameters enable="1"/>
    <EnableProjectFolder enable="0"/>
    <EnableCalibrate enable="1"/>
  </InputOutput>
  <Events>
    <event id="Play"/>
    <event id="Stop"/>
    <event id="Reset"/>
    <event id="Calibrate"/>
    <event id="Action"/>
    <event id="LeftHS"/>
    <event id="LeftTO"/>
    <event id="PerturbationStart"/>
    <event id="PlayCountdown"/>
    <event id="RightHS"/>
    <event id="RightTO"/>
    <event id="StartRecord"/>
    <event id="StopAll"/>
    <event id="StopRecord"/>
  </Events>
  <Modules>
    <module id="1" type="Parameter" title="Parameter">
      <data id="0"/>
    </module>
    <module id="2" type="Script" title="Script">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="LeftHS" action="7"/>
      <event_mapping event="LeftTO" action="8"/>
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="RightHS" action="9"/>
      <event_mapping event="RightTO" action="10"/>
      <event_mapping event="Stop" action="12"/>
      <event_mapping event="StopAll" action="2"/>
      <data id="0" script="-- seconds before perturbation to start/restart recording&#10;recordingStartOffset = recordingStartOffset or 3   -- onset recording n seconds before pert &#10;recordingStopWaitTime = recordingStopWaitTime or 2 -- pause time before the next recording&#10;&#10;-- ramp up and ramp down duration on start and stop treadmill movement&#10;SETTINGS_STOP_START_SECONDS = SETTINGS_STOP_START_SECONDS or 3&#10;&#10;-- ramp up and ramp down duration on start and stop treadmill movement&#10;SETTINGS_COUNTDOWN_SOUND_SECONDS = SETTINGS_COUNTDOWN_SOUND_SECONDS or 4&#10;&#10;updateFromInputsRequested = updateFromInputsRequested or false&#10;stopRequested = stopRequested or false&#10;&#10;-- treadmill state variable: 'none', 'countdown', 'starting', 'stopping', 'steady', 'rising', 'settle', 'falling'&#10;trdmlState = trdmlState or 'none'&#10;&#10;-- variable to store change in state time of treadmill&#10;trdmlStateTime = trdmlStateTime or frametime()&#10;&#10;-- variable to store start speed&#10;trdmlStartSpeed = trdmlStartSpeed or 0&#10;&#10;-- variable to store target speed&#10;trdmlTargetSpeed = trdmlTargetSpeed or 0&#10;&#10;-- variable to store current set speed&#10;trdmlCurrentSpeed = trdmlCurrentSpeed or 0&#10;&#10;&#10;-- variable to store current set speed&#10;trdmlAcc = trdmlAcc or 0&#10;&#10;-- variable to set which side should speed set for: 0 =&gt; none, 1 =&gt; left, 2 =&gt; right, 3 =&gt; both&#10;trdmlTargetSides = trdmlTargetSides or 0&#10;&#10;perturbationIndex = perturbationIndex or 0&#10;&#10;perturbationWaitForEvent = perturbationWaitForEvent or 'none'&#10;perturbationTargetSides = perturbationTargetSides or 0&#10;nextPerturbTime = nextPerturbTime or 0&#10;nextRecordingTime = nextRecordingTime or 0&#10;perturbations_size = perturbations_size or 0&#10;perturbations_all = perturbations_all or {}&#10;perturbation_current = perturbation_current or {}&#10;&#10;isRecordingStarted = isRecordingStarted or false&#10;&#10;myScriptStarted = myScriptStarted or false&#10;&#10;myScriptShouldStop = myScriptShouldStop or false&#10;&#10;&#10;function closeLogFile()&#10;    if logFile ~= nil then&#10;        logFile:flush()&#10;        logFile:close()&#10;        logFile = nil&#10;    end&#10;end&#10;&#10;function createLogFile()&#10;    local logDir = '%APPLICATIONS%\\TNamayeshi\\Recordings\\%SUBJECTID%\\'&#10;    logDir = convertresourcefilenamefromalias(logDir)&#10;    os.execute('mkdir &quot;' .. logDir .. '&quot;')&#10;    print('Log dir &quot;' .. logDir .. '&quot;')&#10;    local logFileName = 'Script.log'&#10;    local index = 1&#10;    while file_exists(logDir .. logFileName) do&#10;        index = index + 1&#10;        logFileName = 'Script-' .. string.format(&quot;%03d&quot;, index) .. ' .log'&#10;    end&#10;    logFile = io.open(logDir .. logFileName, &quot;a&quot;)&#10;    if logFile ~= nil then&#10;        info('Log file ' .. logFileName .. ' created!')&#10;        return true&#10;    end&#10;    print('could not create the log file')&#10;    return false&#10;end&#10;&#10;function log(msg)&#10;    print(msg)&#10;    if logFile == nil then&#10;        if not createLogFile() then&#10;            return&#10;        end&#10;    end&#10;    local date_table = os.date(&quot;*t&quot;)&#10;    local ms = string.match(tostring(os.clock()), &quot;%d%.(%d+)&quot;)&#10;    if ms == nil then&#10;        ms = &quot;0&quot;&#10;    end&#10;    local hour, minute, second = date_table.hour, date_table.min, date_table.sec&#10;    local year, month, day = date_table.year, date_table.month, date_table.day&#10;    local time = string.format(&quot;%04d-%02d-%02d %02d:%02d:%02d.%s&quot;, year, month, day, hour, minute, second, ms)&#10;    logFile:write(time .. ' &gt; ' .. msg .. '\n')&#10;    logFile:flush()&#10;end&#10;&#10;function setTrdmlState(state)&#10;    if trdmlState ~= state then&#10;        trdmlStateTime = frametime()&#10;        log('go from state &quot;' .. trdmlState .. '&quot; to &quot;' .. state .. '&quot;') -- for debug&#10;        trdmlState = state&#10;        return true&#10;    end&#10;    return false&#10;end&#10;&#10;function file_exists(name)&#10;    local f = io.open(name, &quot;r&quot;)&#10;    return f ~= nil and io.close(f)&#10;end&#10;&#10;function computeNextPerturbationTime()&#10;    if PARAM_TreadmillPerturbEnable then&#10;        nextPerturbTime = frametime() + PARAM_TreadmillPerturbIntervalMin&#10;        if PARAM_TreadmillPerturbRandomInterval then&#10;            local randomDiff = (PARAM_TreadmillPerturbIntervalMax - PARAM_TreadmillPerturbIntervalMin) * math.random()&#10;            nextPerturbTime = nextPerturbTime + randomDiff&#10;        end&#10;        nextRecordingTime = nextPerturbTime - recordingStartOffset - recordingStopWaitTime&#10;    else&#10;        nextPerturbTime = 0&#10;        nextRecordingTime = 0&#10;    end&#10;&#10;    local diff = nextPerturbTime - frametime()&#10;    log('Next perturbation in ' .. diff .. ' seconds!') -- for debug&#10;end&#10;&#10;function random_compare(a, b)&#10;    return a.random &lt; b.random&#10;end&#10;&#10;function randomizePerturbationsListOrder()&#10;    log('Perturbations list permutation randomized!') -- for debug&#10;    for i = 1, perturbations_size do&#10;        perturbations_all[i].random = math.random()&#10;    end&#10;    table.sort(perturbations_all, random_compare)&#10;end&#10;&#10;function hasBitSet(value, bitIndex)&#10;    if bitIndex == 1 then return value % 2 == 1 end&#10;    if bitIndex == 2 then return value == 2 or value == 3 end&#10;    return false&#10;end&#10;&#10;function createPerturbationsList()&#10;    local p_count = 0&#10;&#10;    for side = 1, 2 do&#10;        for type = 1, 2 do&#10;            if PARAM_TreadmillPerturbOnset == 4 then&#10;                if hasBitSet(PARAM_TreadmillPerturbLeg, side) and&#10;                    hasBitSet(PARAM_TreadmillPerturbType, type) then&#10;                    p_count = p_count + 1&#10;                    local p = { side = side, type = type, onset = 0, random = 0 }&#10;                    perturbations_all[p_count] = p&#10;                end&#10;            else&#10;                for onset = 1, 2 do&#10;                    if hasBitSet(PARAM_TreadmillPerturbLeg, side) and&#10;                        hasBitSet(PARAM_TreadmillPerturbType, type) and&#10;                        hasBitSet(PARAM_TreadmillPerturbOnset, onset) then&#10;                        p_count = p_count + 1&#10;                        local p = { side = side, type = type, onset = onset, random = 0 }&#10;                        perturbations_all[p_count] = p&#10;                    end&#10;                end&#10;            end&#10;        end&#10;    end&#10;&#10;    perturbations_size = p_count&#10;    log('Perturbations list updated with ' .. p_count .. ' entries') -- for debug&#10;&#10;    if PARAM_TreadmillPerturbRandom then&#10;        randomizePerturbationsListOrder()&#10;    end&#10;end&#10;&#10;function updateFromInputs()&#10;    log('Update parameters from inputs') -- for debug&#10;    updateFromInputsRequested = false&#10;&#10;    PARAM_TreadmillPerturbEnable = inputs.get('TreadmillPerturbEnable') &gt; 0&#10;&#10;    PARAM_TreadmillPerturbLeg = inputs.get('TreadmillPerturbLeg')&#10;    PARAM_TreadmillPerturbType = inputs.get('TreadmillPerturbType')&#10;    PARAM_TreadmillPerturbOnset = inputs.get('TreadmillPerturbOnset')&#10;&#10;    PARAM_TreadmillPerturbRandom = inputs.get('TreadmillPerturbRandom') &gt; 0&#10;&#10;    PARAM_TreadmillSpeed = inputs.get('TreadmillSpeed')&#10;&#10;    PARAM_TreadmillPerturbRandomInterval = inputs.get('TreadmillPerturbRandomInterval') &gt; 0&#10;    PARAM_TreadmillPerturbIntervalMin = inputs.get('TreadmillPerturbIntervalMin')&#10;    PARAM_TreadmillPerturbIntervalMax = inputs.get('TreadmillPerturbIntervalMax')&#10;&#10;    PARAM_TreadmillPerturbAccMag = inputs.get('TreadmillPerturbAccMag')&#10;    PARAM_TreadmillPerturbRiseTime = inputs.get('TreadmillPerturbRiseTime')&#10;    PARAM_TreadmillPerturbSettleTime = inputs.get('TreadmillPerturbSettleTime')&#10;    PARAM_TreadmillPerturbFallTime = inputs.get('TreadmillPerturbFallTime')&#10;&#10;    if recordingStartOffset &gt; PARAM_TreadmillPerturbIntervalMin then&#10;        recordingStartOffset = PARAM_TreadmillPerturbIntervalMin / 2&#10;    end&#10;&#10;    -- Initialize the pseudo random number generator&#10;    math.randomseed(os.time())&#10;    math.random();&#10;    math.random();&#10;    math.random()&#10;    -- done. :-)&#10;&#10;    perturbationWaitForEvent = 'none'&#10;&#10;    createPerturbationsList()&#10;&#10;    if trdmlState == 'steady' then&#10;        computeNextPerturbationTime()&#10;    end&#10;end&#10;&#10;function setRecording(enable)&#10;    if isRecordingStarted == enable then&#10;        return&#10;    end&#10;    isRecordingStarted = enable&#10;    if enable then&#10;         log('Mocap start record ...')&#10;         broadcast('StartRecord')&#10;         outputs.set(&quot;Phidgets.RecordRelay&quot;, 1)&#10;    else&#10;         log('Mocap stop record !')&#10;         broadcast('StopRecord')&#10;         outputs.set(&quot;Phidgets.RecordRelay&quot;, 0)&#10;    end&#10;end&#10;&#10;function setPerturbationVars(startSpeed, targetSpeed, duration, targetSides)&#10;    log('setPerturbationVars&gt; startSpeed:' .. startSpeed .. ', targetSpeed:' .. targetSpeed .. ', duration:' .. duration .. ', targetSides:' .. targetSides) -- for debug&#10;    perturbationTargetSides = targetSides&#10;&#10;    trdmlTargetSides = targetSides&#10;    trdmlCurrentSpeed = startSpeed&#10;    trdmlStartSpeed = startSpeed&#10;    trdmlTargetSpeed = targetSpeed&#10;&#10;    trdmlAcc = (targetSpeed - startSpeed) / duration&#10;end&#10;&#10;function updateSpeed()&#10;    local elapsedTime = frametime() - trdmlStateTime&#10;    if perturbationTargetSides &gt; 0 then&#10;        local finishSpeedChange = false&#10;        trdmlCurrentSpeed = trdmlStartSpeed + (elapsedTime * trdmlAcc)&#10;        if trdmlAcc &gt; 0 then&#10;            if trdmlCurrentSpeed &gt;= trdmlTargetSpeed then&#10;                trdmlCurrentSpeed = trdmlTargetSpeed&#10;                finishSpeedChange = true&#10;            end&#10;        else&#10;            if trdmlCurrentSpeed &lt;= trdmlTargetSpeed then&#10;                trdmlCurrentSpeed = trdmlTargetSpeed&#10;                finishSpeedChange = true&#10;            end&#10;        end&#10;&#10;        if perturbationTargetSides == 1 or perturbationTargetSides == 3 then&#10;            outputs.set('LeftBelt.Speed', trdmlCurrentSpeed)&#10;        end&#10;&#10;        if perturbationTargetSides == 2 or perturbationTargetSides == 3 then&#10;            outputs.set('RightBelt.Speed', trdmlCurrentSpeed)&#10;        end&#10;&#10;        if finishSpeedChange then&#10;            perturbationTargetSides = 0&#10;            if trdmlState == 'rising' then&#10;                setTrdmlState('settle')&#10;            elseif trdmlState == 'falling' then&#10;                setTrdmlState('steady')&#10;            elseif trdmlState == 'starting' then&#10;                setTrdmlState('steady')&#10;            elseif trdmlState == 'stopping' then&#10;                setTrdmlState('none')&#10;                myScriptShouldStop = true&#10;            end&#10;&#10;            if trdmlState == 'steady' then&#10;                computeNextPerturbationTime()&#10;            end&#10;        end&#10;    elseif trdmlState == 'settle' then&#10;        if elapsedTime &gt;= PARAM_TreadmillPerturbSettleTime then&#10;            setTrdmlState('falling')&#10;            setPerturbationVars(trdmlTargetSpeed, trdmlStartSpeed, PARAM_TreadmillPerturbFallTime, trdmlTargetSides)&#10;        end&#10;    elseif trdmlState == 'countdown' then&#10;        if elapsedTime &gt;= SETTINGS_COUNTDOWN_SOUND_SECONDS then&#10;            setTrdmlState('starting')&#10;            setPerturbationVars(0, PARAM_TreadmillSpeed, SETTINGS_STOP_START_SECONDS, 3)&#10;        end&#10;    end&#10;end&#10;&#10;function dump(o)&#10;    if type(o) == 'table' then&#10;        local s = '{ '&#10;        for k, v in pairs(o) do&#10;            if type(k) ~= 'number' then k = '&quot;' .. k .. '&quot;' end&#10;            s = s .. '[' .. k .. '] = ' .. dump(v) .. ','&#10;        end&#10;        return s .. '} '&#10;    else&#10;        return tostring(o)&#10;    end&#10;end&#10;&#10;function startPerturbation()&#10;    if perturbationIndex &gt; 0 and (perturbationIndex % perturbations_size == 0) then&#10;        randomizePerturbationsListOrder()&#10;    end&#10;&#10;    perturbationIndex = perturbationIndex + 1&#10;    local p_inx = perturbationIndex&#10;    if p_inx &gt; perturbations_size then&#10;        p_inx = ((p_inx - 1) % perturbations_size) + 1&#10;    end&#10;&#10;    perturbation_current = perturbations_all[p_inx];&#10;    if perturbation_current == nil then&#10;        log('Can not find perturbation at index ' .. p_inx) -- for debug&#10;        return&#10;    end&#10;&#10;    local onset = perturbation_current.onset&#10;    local pside = perturbation_current.side&#10;    local ptype = perturbation_current.type&#10;&#10;    log('Perturbation&gt; Onset:' .. onset .. ', Side: ' .. pside .. ', Type: ' .. ptype)&#10;&#10;    if onset == 0 then&#10;&#10;        local acc = PARAM_TreadmillPerturbAccMag&#10;        if ptype == 2 then&#10;            acc = -acc&#10;        end&#10;        local targetSpeed = PARAM_TreadmillSpeed + (acc * PARAM_TreadmillPerturbRiseTime)&#10;        setPerturbationVars(PARAM_TreadmillSpeed, targetSpeed, PARAM_TreadmillPerturbRiseTime, pside)&#10;        broadcast('PerturbationStart')&#10;        setTrdmlState('rising')&#10;    else&#10;&#10;&#10;        local left = false&#10;        local hillStrike = false&#10;        left = hasBitSet(pside, 1)&#10;        hillStrike = hasBitSet(onset, 1)&#10;&#10;        log('Waiting for perturbation triger event ... ') -- for debug&#10;&#10;        if left then&#10;            if hillStrike then&#10;                perturbationWaitForEvent = &quot;1&quot;&#10;            else&#10;                perturbationWaitForEvent = &quot;2&quot;&#10;            end&#10;        else&#10;            if hillStrike then&#10;                perturbationWaitForEvent = &quot;3&quot;&#10;            else&#10;                perturbationWaitForEvent = &quot;4&quot;&#10;            end&#10;        end&#10;    end&#10;end&#10;&#10;if not myScriptStarted then&#10;    myScriptStarted = true&#10;    log('Lua script execution started at time: ' .. frametime())&#10;end&#10;&#10;updateSpeed()&#10;&#10;for i = 1, actions() do&#10;    if action(i) == 'Action' then&#10;        if trdmlState == 'none' then&#10;            updateFromInputs()&#10;            setTrdmlState('countdown')&#10;            broadcast('PlayCountdown')&#10;        else&#10;            updateFromInputsRequested = true&#10;        end&#10;    elseif action(i) == 'Custom 6' then&#10;        if trdmlState == 'steady' then&#10;            setTrdmlState('stopping')&#10;            setPerturbationVars(PARAM_TreadmillSpeed, 0, SETTINGS_STOP_START_SECONDS, 3)&#10;        elseif trdmlState ~= 'none' then&#10;            stopRequested = true&#10;        end&#10;    elseif string.find(action(i), 'Custom') then&#10;        -- start perturbation if waiting for custom action&#10;        if perturbationWaitForEvent ~= 'none' then&#10;            local eventNumber = string.sub(action(i), 8)&#10;            if eventNumber == perturbationWaitForEvent then&#10;                log('Event ID &quot;' .. eventNumber .. '&quot; triggered!') -- for debug&#10;                perturbationWaitForEvent = 'none'&#10;                local pside = perturbation_current.side&#10;                local ptype = perturbation_current.type&#10;                local acc = PARAM_TreadmillPerturbAccMag&#10;                if ptype == 2 then&#10;                    acc = -acc&#10;                end&#10;                local targetSpeed = PARAM_TreadmillSpeed + (acc * PARAM_TreadmillPerturbRiseTime)&#10;                setPerturbationVars(PARAM_TreadmillSpeed, targetSpeed, PARAM_TreadmillPerturbRiseTime, pside)&#10;                broadcast('PerturbationStart')&#10;                setTrdmlState('rising')&#10;            else&#10;                log('Event ID &quot;' .. eventNumber .. '&quot; received instead of &quot;' .. perturbationWaitForEvent .. '&quot;') -- for debug&#10;            end&#10;        end&#10;    end&#10;end&#10;&#10;if trdmlState == 'steady' and stopRequested then&#10;    stopRequested = false&#10;    setTrdmlState('stopping')&#10;    setPerturbationVars(PARAM_TreadmillSpeed, 0, SETTINGS_STOP_START_SECONDS, 3)&#10;end&#10;&#10;if trdmlState == 'steady' and updateFromInputsRequested then&#10;    updateFromInputs()&#10;end&#10;&#10;if perturbationWaitForEvent == 'none' and trdmlState == 'steady' then&#10;    if nextRecordingTime &gt; 0.1 and frametime() &gt;= nextRecordingTime then&#10;        if isRecordingStarted then&#10;            setRecording(false)&#10;            nextRecordingTime = nextRecordingTime + recordingStopWaitTime&#10;        else&#10;            nextRecordingTime = 0&#10;            setRecording(true)&#10;        end        &#10;    end&#10;&#10;    if nextPerturbTime &gt; 0.1 and frametime() &gt;= nextPerturbTime then&#10;        nextPerturbTime = 0&#10;        startPerturbation()&#10;    end&#10;end&#10;&#10;&#10;if myScriptShouldStop then&#10;    setRecording(false)&#10;    myScriptStarted = false&#10;    myScriptShouldStop = false&#10;    broadcast('StopAll')&#10;    log('Lua script execution stopped at time: ' .. frametime())&#10;    closeLogFile()&#10;end&#10;" collisions="false">
        <inputs>
          <StringArray>
            <String value="TreadmillPerturbEnable"/>
            <String value="TreadmillPerturbLeg"/>
            <String value="TreadmillPerturbType"/>
            <String value="TreadmillPerturbOnset"/>
            <String value="TreadmillPerturbRandom"/>
            <String value="TreadmillSpeed"/>
            <String value="TreadmillPerturbRandomInterval"/>
            <String value="TreadmillPerturbIntervalMin"/>
            <String value="TreadmillPerturbIntervalMax"/>
            <String value="TreadmillPerturbAccMag"/>
            <String value="TreadmillPerturbRiseTime"/>
            <String value="TreadmillPerturbSettleTime"/>
            <String value="TreadmillPerturbFallTime"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="LeftBelt.Speed"/>
            <String value="RightBelt.Speed"/>
            <String value="Phidgets.RecordRelay"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="3" type="SelfPacedTreadmill" title="SelfPacedTreadmill">
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="0"/>
      <event_mapping event="StopAll" action="2"/>
      <data id="0" LinkSpeeds="false" OutputTargetSpeed="true" AutoStopSelfPaced="true">
        <TreadmillSingle id="0" MaxAcceleration="0.25" MaxSpeed="2" MinSpeed="0" HighPerformanceMode="false"/>
        <TreadmillDual id="0" MaxAcceleration="3" MaxSpeed="5" MinSpeed="0" HighPerformanceMode="false"/>
        <SelfPacedController id="0" Sensitivity="1" UseNew="false" AdjustTreadmillCenterPosOnCal="true"/>
      </data>
    </module>
    <module id="4" type="Record" title="Record">
      <event_mapping event="Pause" action="2"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Record" action="1"/>
      <event_mapping event="StartRecord" action="1"/>
      <event_mapping event="Stop" action="0"/>
      <event_mapping event="StopAll" action="3"/>
      <event_mapping event="StopRecord" action="3"/>
      <data id="0" file="%APPLICATIONS%\TNamayeshi\Recordings\%SUBJECTID%\Treadmil.csv" append_time="true" separator="," use_global="true" Channel01="LeftBelt.Speed" Channel02="RightBelt.Speed" Channel03="LeftBelt.SpeedMeasured" Channel04="RightBelt.SpeedMeasured" Channel05="Channel05" Channel06="Channel06" Channel07="Channel07" Channel08="Channel08" Channel09="Channel09" Channel10="Channel10" Channel11="Channel11" Channel12="Channel12" Channel13="Channel13" Channel14="Channel14" Channel15="Channel15" Channel16="Channel16" Channel17="Channel17" Channel18="Channel18" Channel19="Channel19" Channel20="Channel20" Channel21="Channel21" Channel22="Channel22" Channel23="Channel23" Channel24="Channel24" Channel25="Channel25" Channel26="Channel26" Channel27="Channel27" Channel28="Channel28" Channel29="Channel29" Channel30="Channel30" Channel31="Channel31" Channel32="Channel32" Channel33="Channel33" Channel34="Channel34" Channel35="Channel35" Channel36="Channel36" Channel37="Channel37" Channel38="Channel38" Channel39="Channel39" Channel40="Channel40" Channel41="Channel41" Channel42="Channel42" Channel43="Channel43" Channel44="Channel44" Channel45="Channel45" Channel46="Channel46" Channel47="Channel47" Channel48="Channel48" Channel49="Channel49" Channel50="Channel50" Channel51="Channel51" Channel52="Channel52" Channel53="Channel53" Channel54="Channel54" Channel55="Channel55" Channel56="Channel56" Channel57="Channel57" Channel58="Channel58" Channel59="Channel59" Channel60="Channel60" Channel61="Channel61" Channel62="Channel62" Channel63="Channel63" Channel64="Channel64" Channel65="Channel65" Channel66="Channel66" Channel67="Channel67" Channel68="Channel68" Channel69="Channel69" Channel70="Channel70" Channel71="Channel71" Channel72="Channel72" Channel73="Channel73" Channel74="Channel74" Channel75="Channel75" Channel76="Channel76" Channel77="Channel77" Channel78="Channel78" Channel79="Channel79" Channel80="Channel80" Channel81="Channel81" Channel82="Channel82" Channel83="Channel83" Channel84="Channel84" Channel85="Channel85" Channel86="Channel86" Channel87="Channel87" Channel88="Channel88" Channel89="Channel89" Channel90="Channel90" Channel91="Channel91" Channel92="Channel92" Channel93="Channel93" Channel94="Channel94" Channel95="Channel95" Channel96="Channel96" Channel97="Channel97" Channel98="Channel98" Channel99="Channel99" Channel100="Channel100" Channel101="Channel101" Channel102="Channel102" Channel103="Channel103" Channel104="Channel104" Channel105="Channel105" Channel106="Channel106" Channel107="Channel107" Channel108="Channel108" Channel109="Channel109" Channel110="Channel110" Channel111="Channel111" Channel112="Channel112" Channel113="Channel113" Channel114="Channel114" Channel115="Channel115" Channel116="Channel116" Channel117="Channel117" Channel118="Channel118" Channel119="Channel119" Channel120="Channel120" Channel121="Channel121" Channel122="Channel122" Channel123="Channel123" Channel124="Channel124" Channel125="Channel125" Channel126="Channel126" Channel127="Channel127" Channel128="Channel128" Channel129="Channel129" Channel130="Channel130" Channel131="Channel131" Channel132="Channel132" Channel133="Channel133" Channel134="Channel134" Channel135="Channel135" Channel136="Channel136" Channel137="Channel137" Channel138="Channel138" Channel139="Channel139" Channel140="Channel140" Channel141="Channel141" Channel142="Channel142" Channel143="Channel143" Channel144="Channel144" Channel145="Channel145" Channel146="Channel146" Channel147="Channel147" Channel148="Channel148" Channel149="Channel149" Channel150="Channel150" Channel151="Channel151" Channel152="Channel152" Channel153="Channel153" Channel154="Channel154" Channel155="Channel155" Channel156="Channel156" Channel157="Channel157" Channel158="Channel158" Channel159="Channel159" Channel160="Channel160" Channel161="Channel161" Channel162="Channel162" Channel163="Channel163" Channel164="Channel164" Channel165="Channel165" Channel166="Channel166" Channel167="Channel167" Channel168="Channel168" Channel169="Channel169" Channel170="Channel170" Channel171="Channel171" Channel172="Channel172" Channel173="Channel173" Channel174="Channel174" Channel175="Channel175" Channel176="Channel176" Channel177="Channel177" Channel178="Channel178" Channel179="Channel179" Channel180="Channel180" Channel181="Channel181" Channel182="Channel182" Channel183="Channel183" Channel184="Channel184" Channel185="Channel185" Channel186="Channel186" Channel187="Channel187" Channel188="Channel188" Channel189="Channel189" Channel190="Channel190" Channel191="Channel191" Channel192="Channel192" Channel193="Channel193" Channel194="Channel194" Channel195="Channel195" Channel196="Channel196" Channel197="Channel197" Channel198="Channel198" Channel199="Channel199" Channel200="Channel200" Channel201="Channel201" Channel202="Channel202" Channel203="Channel203" Channel204="Channel204" Channel205="Channel205" Channel206="Channel206" Channel207="Channel207" Channel208="Channel208" Channel209="Channel209" Channel210="Channel210" Channel211="Channel211" Channel212="Channel212" Channel213="Channel213" Channel214="Channel214" Channel215="Channel215" Channel216="Channel216" Channel217="Channel217" Channel218="Channel218" Channel219="Channel219" Channel220="Channel220" Channel221="Channel221" Channel222="Channel222" Channel223="Channel223" Channel224="Channel224" Channel225="Channel225" Channel226="Channel226" Channel227="Channel227" Channel228="Channel228" Channel229="Channel229" Channel230="Channel230" Channel231="Channel231" Channel232="Channel232" Channel233="Channel233" Channel234="Channel234" Channel235="Channel235" Channel236="Channel236" Channel237="Channel237" Channel238="Channel238" Channel239="Channel239" Channel240="Channel240" Channel241="Channel241" Channel242="Channel242" Channel243="Channel243" Channel244="Channel244" Channel245="Channel245" Channel246="Channel246" Channel247="Channel247" Channel248="Channel248" Channel249="Channel249" Channel250="Channel250"/>
    </module>
    <module id="5" type="Graph" title="Graph">
      <data id="0"/>
    </module>
    <module id="6" type="Phidgets2" title="Phidgets">
      <data id="0">
        <PhidgetsConfig id="0" PhidgetType="0" IdentifierConfigIndex="0" InputChannels="8" OutputChannels="0"/>
      </data>
    </module>
    <module id="7" type="MoCap" title="MoCap">
      <event_mapping event="MocapStartRecord" action="0"/>
      <event_mapping event="MocapStopRecord" action="0"/>
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Record" action="2"/>
      <event_mapping event="Reset" action="4"/>
      <event_mapping event="Stop" action="0"/>
      <event_mapping event="StopAll" action="3"/>
      <data id="0" Source="0" MinimumForce="1" SimulateSinglePlate="false" SimulateSingleForcePlate="false" ApplyStaticInertiaCompensationOnForcePlates="true" InertiaCompensationType="0" ShowChildModel="false" HBMOutputAbsoluteForces="true" AutoUpdateWeight="true" Mesh="" PropagateTransformation="false" FileFormat="3" OutputFile="%APPLICATIONS%\TNamayeshi\Recordings\%SUBJECTID%\Mocap.c3d" InputFile="" LoopPlayBack="false" UseUnique="true" WriteOutputChannelsOnly="false" WriteHighFreqChannels="true" WaitForNewFrame="false" UseOutputFilter="false" OutputFilterFreq="10" UseFileFilter="false" FileFilterFreq="10" UseEMGOutputFilter="false" EMGOutputFilterFreq="10" VMBEnabled="true" VMBArmsMode="0" VMBLegsMode="0" VMBMode="0" VMBDelay="0.5" VMBShowMirrorPlanes="false" ShowCaptureVolume="false">
        <Configuration id="0" Flags="1273" VST="" LabeledMarkers="0" LabeledSegments="0" UnlabeledChannels="0" ForcePlates="2" AnalogChannels="16" LabeledMode="0" OutputChannels="1111111111111111111111111111111111111000000000000">
          <EMGChannels>
            <EMGMuscleAssignments/>
          </EMGChannels>
          <AnalogSettings>
            <AnalogSettings>
              <Channel label="Channel 1" outputEnabled="false"/>
              <Channel label="Channel 2" outputEnabled="false"/>
              <Channel label="Channel 3" outputEnabled="false"/>
              <Channel label="Channel 4" outputEnabled="false"/>
              <Channel label="Channel 5" outputEnabled="false"/>
              <Channel label="Channel 6" outputEnabled="false"/>
              <Channel label="Channel 7" outputEnabled="false"/>
              <Channel label="Channel 8" outputEnabled="false"/>
              <Channel label="Channel 9" outputEnabled="false"/>
              <Channel label="Channel 10" outputEnabled="false"/>
              <Channel label="Channel 11" outputEnabled="false"/>
              <Channel label="Channel 12" outputEnabled="false"/>
              <Channel label="Channel 13" outputEnabled="false"/>
              <Channel label="Channel 14" outputEnabled="false"/>
              <Channel label="Channel 15" outputEnabled="false"/>
              <Channel label="Channel 16" outputEnabled="false"/>
              <ForcePlateFilterFrequency value="6"/>
            </AnalogSettings>
          </AnalogSettings>
        </Configuration>
        <ForcePlateBonte id="0" MinimumForce="1" UseCrossTalkMatrix="true" ForcePlateMode="0"/>
        <HBMSubjectInfo id="0" MarkerDiameter="0.014" FilterFreq="6"/>
        <MarkerVisualization id="0" ShowMarkers="true" ShowMarkerLabels="false" MarkerScale="0.04"/>
        <SkeletonVisualization id="0" SphereSize="0.06" CylinderSize="0.03" ShowSkeleton="false" ShowLabels="false"/>
        <MeshVisualization id="0" Show="false" ApplyRotationsOnly="false" LocalOrientations="false" SkeletonVisible="false" SkeletonVisualizationScale="1"/>
        <ForceVisualization id="0" MinimumForce="0" ScaleFactor="0.01" ArrowDiameter="0.05" Show="false"/>
        <HMBSkelVisualization id="0" InactiveR="0.75" InactiveG="0" InactiveB="0" InactiveA="1" IntermediateR="0" IntermediateG="0.75" IntermediateB="0" IntermediateA="1" ActiveR="1" ActiveG="1" ActiveB="1" ActiveA="1" ColorSensitivity="1" show="true" showMuscleForces="true" showSkeleton="false" showMoments="false"/>
        <Sorter id="0" mode="1" nb="0" sort_x="0" sort_y="0" sort_z="0" template=""/>
        <GrailConfig id="0" OutputFileGrail="%APPLICATIONS%\TNamayeshi\Recordings\%SUBJECTID%\MoxFile.mox" GrailProcessingEnabled="true" GrailVideoEnabled="false" OutputChannelsEnabled="false" UseUniqueOutputName="true" OutputStepParameters="true" OutputEMGParameters="true" OutputKineParameters="true" OutputMomentParameters="true" OutputPowerParameters="true" DisableStepProcessingWhenThreadmillNotMoving="true" NormalizeMomentsAndPowersOnBodyMass="false" LeftHSEvent="LeftHS" LeftTOEvent="LeftTO" RightHSEvent="RightHS" RightTOEvent="RightTO" StepDetectionAlgorithm="2"/>
        <HBMConfig id="0" AllowMissingMarkers="false" CalculateMuscleForces="true"/>
      </data>
    </module>
    <module id="8" type="Platform" title="Platform">
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Stop" action="0"/>
      <event_mapping event="StopAll" action="0"/>
      <data id="0" ShowPlatform="true" ShowActual="true" Safety="true" FilterFreq="1" Manual="true" FixYaw="false" Factor="1" GUIWidth="336" GUIHeight="721"/>
    </module>
    <module id="9" type="3DText" title="3DText">
      <event_mapping event="LeftHS" action="1"/>
      <event_mapping event="LeftTO" action="2"/>
      <data id="0" UseEventText="false" Local="false" RealText="Left  " MaxRefreshRate="0.2" Link="true">
        <Position>
          <Vector3 x="0" y="0" z="-2"/>
        </Position>
        <Rotation>
          <Vector3 x="0" y="0" z="0"/>
        </Rotation>
        <Scale>
          <Vector3 x="1" y="1" z="0.3"/>
        </Scale>
        <TextVisualizer id="0" Text="Left  " Font="trebucbd.ttf" Align="2" Use3D="false" UseScreenSpace="false" ScreenSpaceX="0" ScreenSpaceY="0" CastShadows="false" Visible="true">
          <Color>
            <Color x="1" y="1" z="1" w="1"/>
          </Color>
        </TextVisualizer>
      </data>
    </module>
    <module id="10" type="3DText" title="3DText">
      <event_mapping event="RightHS" action="1"/>
      <event_mapping event="RightTO" action="2"/>
      <data id="0" UseEventText="false" Local="false" RealText="  Right" MaxRefreshRate="0.2" Link="true">
        <Position>
          <Vector3 x="0" y="0" z="-2"/>
        </Position>
        <Rotation>
          <Vector3 x="0" y="0" z="0"/>
        </Rotation>
        <Scale>
          <Vector3 x="1" y="1" z="0.3"/>
        </Scale>
        <TextVisualizer id="0" Text="  Right" Font="trebucbd.ttf" Align="0" Use3D="false" UseScreenSpace="false" ScreenSpaceX="0" ScreenSpaceY="0" CastShadows="false" Visible="true">
          <Color>
            <Color x="1" y="1" z="1" w="1"/>
          </Color>
        </TextVisualizer>
      </data>
    </module>
    <module id="11" type="SoundPlayer" title="SoundPlayer">
      <event_mapping event="Play" action="0"/>
      <event_mapping event="PlayCountdown" action="1"/>
      <event_mapping event="Stop" action="0"/>
      <event_mapping event="StopAll" action="2"/>
      <data id="0" Gain="50" Pitch="0" PosX="0" PosY="0" PosZ="0" sound="%APPLICATIONS%\TNamayeshi\Countdown.wav" loop="0" relative="false"/>
    </module>
  </Modules>
  <Connectors>
    <connector id="12" src="1" trg="2" src_box="13" trg_box="14">
      <Boxes/>
      <Wires>
        <wire id="15" src="13" src_idx="0" trg="14" trg_idx="0"/>
        <wire id="16" src="13" src_idx="1" trg="14" trg_idx="1"/>
        <wire id="17" src="13" src_idx="2" trg="14" trg_idx="2"/>
        <wire id="18" src="13" src_idx="3" trg="14" trg_idx="3"/>
        <wire id="19" src="13" src_idx="4" trg="14" trg_idx="4"/>
        <wire id="20" src="13" src_idx="5" trg="14" trg_idx="5"/>
        <wire id="21" src="13" src_idx="6" trg="14" trg_idx="6"/>
        <wire id="22" src="13" src_idx="7" trg="14" trg_idx="7"/>
        <wire id="23" src="13" src_idx="8" trg="14" trg_idx="8"/>
        <wire id="24" src="13" src_idx="9" trg="14" trg_idx="9"/>
        <wire id="25" src="13" src_idx="10" trg="14" trg_idx="10"/>
        <wire id="26" src="13" src_idx="11" trg="14" trg_idx="11"/>
        <wire id="27" src="13" src_idx="12" trg="14" trg_idx="12"/>
      </Wires>
    </connector>
    <connector id="28" src="2" trg="4" src_box="29" trg_box="30">
      <Boxes/>
      <Wires>
        <wire id="31" src="29" src_idx="0" trg="30" trg_idx="0"/>
        <wire id="32" src="29" src_idx="1" trg="30" trg_idx="1"/>
      </Wires>
    </connector>
    <connector id="33" src="3" trg="4" src_box="34" trg_box="35">
      <Boxes/>
      <Wires>
        <wire id="36" src="34" src_idx="0" trg="35" trg_idx="2"/>
        <wire id="37" src="34" src_idx="2" trg="35" trg_idx="3"/>
      </Wires>
    </connector>
    <connector id="38" src="2" trg="3" src_box="39" trg_box="40">
      <Boxes/>
      <Wires>
        <wire id="41" src="39" src_idx="0" trg="40" trg_idx="2"/>
        <wire id="42" src="39" src_idx="1" trg="40" trg_idx="3"/>
      </Wires>
    </connector>
    <connector id="43" src="2" trg="5" src_box="44" trg_box="45">
      <Boxes/>
      <Wires>
        <wire id="46" src="44" src_idx="1" trg="45" trg_idx="1"/>
        <wire id="47" src="44" src_idx="0" trg="45" trg_idx="0"/>
      </Wires>
    </connector>
    <connector id="48" src="2" trg="6" src_box="49" trg_box="50">
      <Boxes/>
      <Wires>
        <wire id="51" src="49" src_idx="2" trg="50" trg_idx="0"/>
      </Wires>
    </connector>
  </Connectors>
</Caren2Project>
